name: 🧪 Requirements-Driven Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Generate tests from requirements
  generate-tests:
    name: 📋 Generate Tests from Requirements
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate tests from requirements
        run: npm run generate:tests
        
      - name: Upload generated tests
        uses: actions/upload-artifact@v4
        with:
          name: generated-tests
          path: tests/
          
      - name: Upload requirements report
        uses: actions/upload-artifact@v4  
        with:
          name: requirements-report
          path: tests/requirements-report.html

  # Type checking and linting
  static-analysis:
    name: 🔍 Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type checking
        run: npm run typecheck
        
      - name: Lint code
        run: npm run lint

  # Unit tests with coverage
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [generate-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download generated tests
        uses: actions/download-artifact@v4
        with:
          name: generated-tests
          path: tests/
          
      - name: Run unit tests with coverage
        run: npm run test:coverage
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unit
          name: unit-tests
          
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  # E2E tests across multiple browsers
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [generate-tests, static-analysis]
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download generated tests
        uses: actions/download-artifact@v4
        with:
          name: generated-tests  
          path: tests/
          
      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps
        
      - name: Run E2E tests
        run: npx playwright test tests/e2e/contrast.spec.ts --project=${{ matrix.browser }}
        env:
          CI: true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Mobile E2E tests
  mobile-tests:
    name: 📱 Mobile E2E Tests
    runs-on: ubuntu-latest
    needs: [generate-tests, static-analysis]
    strategy:
      matrix:
        device: [mobile-chrome, mobile-safari]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download generated tests
        uses: actions/download-artifact@v4
        with:
          name: generated-tests
          path: tests/
          
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run mobile E2E tests
        run: npx playwright test --project=${{ matrix.device }}
        env:
          CI: true
          
      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results-${{ matrix.device }}
          path: |
            test-results/
            playwright-report/

  # Performance and accessibility testing
  performance-tests:
    name: ⚡ Performance & A11y Tests
    runs-on: ubuntu-latest
    needs: [generate-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Start application
        run: npm start &
        env:
          PORT: 3000
          
      - name: Wait for app to be ready
        run: npx wait-on http://localhost:3000
        
      - name: Run Lighthouse CI
        run: npx @lhci/cli@0.13.x autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Security scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level high
        
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: typescript, javascript

  # Requirements coverage report
  requirements-coverage:
    name: 📊 Requirements Coverage Report  
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Generate comprehensive test report
        run: |
          echo "# Requirements Coverage Report 📋" > requirements-summary.md
          echo "" >> requirements-summary.md
          echo "## Test Execution Summary" >> requirements-summary.md
          echo "" >> requirements-summary.md
          
          # Count total requirements
          TOTAL_REQS=$(grep -c "id:" requirements/spec.yaml)
          echo "- **Total Requirements**: $TOTAL_REQS" >> requirements-summary.md
          
          # Add test status
          echo "- **Unit Tests**: ✅ Completed" >> requirements-summary.md
          echo "- **E2E Tests**: ✅ Completed" >> requirements-summary.md
          echo "- **Mobile Tests**: ✅ Completed" >> requirements-summary.md
          echo "- **Performance Tests**: ✅ Completed" >> requirements-summary.md
          echo "- **Security Scan**: ✅ Completed" >> requirements-summary.md
          echo "" >> requirements-summary.md
          echo "## Artifacts Generated" >> requirements-summary.md
          echo "- Requirements traceability report" >> requirements-summary.md  
          echo "- Unit test coverage reports" >> requirements-summary.md
          echo "- E2E test results (desktop & mobile)" >> requirements-summary.md
          echo "- Performance audit results" >> requirements-summary.md
          
      - name: Upload requirements summary
        uses: actions/upload-artifact@v4
        with:
          name: requirements-summary
          path: requirements-summary.md

  # Deployment (only on main branch)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [static-analysis, unit-tests, e2e-tests, mobile-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'